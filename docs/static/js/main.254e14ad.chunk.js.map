{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifItem.js","components/GifGrid.js","hooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["AddCategory","props","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","placeholder","getGifs","category","a","q","encodeURI","path","fetch","res","json","data","gifs","map","img","key","id","title","url","images","downsized_medium","GifItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","image","GifExpertApp","ReactDOM","render","document","getElementById"],"mappings":"mMAGaA,EAAc,SAACC,GAAW,IAE7BC,EAAkBD,EAAlBC,cAF4B,EAGAC,mBAAS,IAHT,mBAG7BC,EAH6B,KAGjBC,EAHiB,KAkBpC,OACE,uBAAMC,SAVa,SAACC,GACpBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC7BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKhB,UACE,kDAAqBD,KACrB,uBACEQ,KAAK,OACLC,MAAOT,EACPU,SAnBoB,SAACP,GACzBF,EAAcE,EAAEQ,OAAOF,QAmBnBG,YAAY,kB,uCC5BPC,EAAO,uCAAG,WAAMC,GAAN,yBAAAC,EAAA,4DACN,mCACD,GACRC,EAAIC,UAAUH,GACR,uCACNI,EALe,UAIT,uCAJS,kBAEP,GAFO,cAKmBF,EALnB,oBACN,oCADM,SAOHG,MAAMD,GAPH,cAOfE,EAPe,iBAQEA,EAAIC,OARN,wBAQbC,EARa,EAQbA,KAEFC,EAAOD,EAAKE,KAAI,SAAAC,GAAQ,IAAD,EAC3B,MAAO,CACLC,IAAKD,EAAIE,GACTA,GAAIF,EAAIE,GACRC,MAAOH,EAAIG,MACXC,IAAG,UAAEJ,EAAIK,cAAN,aAAE,EAAYC,iBAAiBF,QAfjB,kBAmBdN,GAnBc,4CAAH,sDCEPS,EAAU,SAACnC,GAAW,IACzB8B,EAAmB9B,EAAnB8B,GAAIC,EAAe/B,EAAf+B,MAAOC,EAAQhC,EAARgC,IAEnB,OACE,sBAAKI,UAAU,yCAAf,UACE,qBAAKC,IAAKL,EAAKM,IAAKP,EAAOD,GAAIA,IAC/B,6BAAKC,QCHEQ,EAAU,SAAC,GAAkB,IAAhBtB,EAAe,EAAfA,SAAe,ECFb,SAACA,GAAc,IAAD,EACdf,mBAAS,CACjCuB,KAAM,GACNe,SAAS,IAH6B,mBACjCC,EADiC,KAC1BC,EAD0B,KAgBxC,OAVAC,qBAAU,WACR3B,EAAQC,GACL2B,MAAK,SAAAC,GACJH,EAAS,CACPjB,KAAMoB,EACNL,SAAS,SAGd,CAACvB,IAEGwB,EDZ0BK,CAAa7B,GAAjCgB,EAF0B,EAEhCR,KAAce,EAFkB,EAElBA,QAErB,OACE,qCACE,oBAAIJ,UAAU,mCAAd,SAAkDnB,IACjDuB,GAAW,WAEZ,qBAAKJ,UAAU,YAAf,SAEIH,EAAON,KAAI,SAAAoB,GAAK,OACd,cAAC,EAAD,eAAaA,aEeVC,EA5BM,WAAO,IAAD,EACW9C,mBAAS,CAAC,WADrB,mBAClBQ,EADkB,KACNT,EADM,KAQzB,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEIS,EAAWiB,KAAI,SAAAV,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAUA,GADLA,Y,MClBnBgC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.254e14ad.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nexport const AddCategory = (props) => {\n\n  const { setCategories } = props;\n  const [inputValue, setInputValue] = useState('');\n\n  const handleChangeInput = (e) => {\n    setInputValue(e.target.value)\n  }\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n\n    if (inputValue.trim().length > 1) {\n      setCategories(categories => [inputValue, ...categories]);\n      setInputValue('');\n    }\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h2>Add Category -- {inputValue}</h2>\n      <input\n        type=\"text\"\n        value={inputValue}\n        onChange={handleChangeInput}\n        placeholder=\"Search...\"\n      />\n    </form>\n  )\n}\n\nAddCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n}\n\n/*AddCategory.defaultProps = {\n  setCategories: () => {},\n}*/\n","export const getGifs = async(category) => {\n  const apiKey = 'SpzXIX4nHQua6KPUXMLG5D8A7SJTNzF3';\n  const limit = 10;\n  const q = encodeURI(category);\n  const api = 'https://api.giphy.com/v1/gifs/search';\n  const path = `${api}?limit=${limit}&q=${q}&api_key=${apiKey}`;\n\n  const res = await fetch(path);\n  const { data } = await res.json();\n\n  const gifs = data.map(img => {\n    return {\n      key: img.id,\n      id: img.id,\n      title: img.title,\n      url: img.images?.downsized_medium.url,\n    };\n  });\n\n  return gifs;\n}","import React from 'react';\n\nexport const GifItem = (props) => {\n  const { id, title, url } = props;\n\n  return (\n    <div className=\"card animate__animated animate__fadeIn\">\n      <img src={url} alt={title} id={id}/>\n      <h5>{title}</h5>\n    </div>\n  );\n}\n","import React from 'react';\nimport 'animate.css/animate.css';\nimport { useFetchGifs } from '../hooks/useFetchGifs';\nimport { GifItem } from './GifItem';\n\nexport const GifGrid = ({ category }) => {\n\n  const {data: images, loading } = useFetchGifs(category);\n\n  return (\n    <>\n      <h3 className=\"animate__animated animate__flash\">{category}</h3>\n      {loading && 'Cargando'}\n\n      <div className=\"card-grid\">\n        {\n          images.map(image =>\n            <GifItem {...image} />\n          )\n        }\n      </div>\n    </>\n  );\n}\n","import { useEffect, useState } from \"react\"\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useFetchGifs = (category) => {\n  const [state, setstate] = useState({\n    data: [],\n    loading: true\n  })\n\n  useEffect(() => {\n    getGifs(category)\n      .then(imgs => {\n        setstate({\n          data: imgs,\n          loading: false\n        })\n      });\n  }, [category]);\n\n  return state;\n}\n","import React, { useState } from 'react';\nimport { AddCategory } from './AddCategory';\nimport { GifGrid } from './GifGrid';\n\nconst GifExpertApp = () => {\n  const [categories, setCategories] = useState(['Soccer']);\n\n  /*const handleAdd = () => {\n    setCategories([...categories, 'Golf']);\n    //setCategories(cats => [...cats, 'Golf']);\n  };*/\n\n  return (\n    <>\n      <h2>GifExpertApp</h2>\n      <AddCategory setCategories={setCategories} />\n      <hr />\n      {/*<button onClick={handleAdd}>Add</button>*/}\n\n      <ol>\n        {\n          categories.map(category =>\n            <GifGrid\n              key={category}\n              category={category} />\n          )\n        }\n      </ol>\n    </>\n  );\n};\n\nexport default GifExpertApp;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './components/GifExpertApp';\nimport './index.css';\n\nReactDOM.render(\n  <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}